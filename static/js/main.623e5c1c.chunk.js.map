{"version":3,"sources":["components/Details/Details.module.css","pages/Movie/Movie.module.css","App.module.css","services/movies-api.js","ui/Button/ButtonWrap.js","ui/Input/Input.js","components/SearchBar/SearchBar.js","ui/ItemMovie/ItemMovie.js","components/Details/Details.js","components/MovieList/MovieList.js","pages/Movie/Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","baseURL","get","then","movies","data","results","console","log","id","character","useStyles","makeStyles","theme","root","margin","spacing","color","backgroundColor","ButtonWrap","name","toggleSortMovies","classes","className","Button","variant","href","onClick","width","fontFamily","borderColor","Input","handleSubmit","placeholder","value","handleChange","noValidate","autoComplete","TextField","autoFocus","label","onChange","SearchBar","searchQuery","marginLeft","ItemMovie","Typography","Link","Details","state","characters","this","findMovieCharacters","charactersFromSelectedMovie","props","urlOfcharactersFromSelectedMovie","flat","urlIDs","map","url","replace","Promise","all","moviesAPI","setState","targetMovie","movie","css","font","key","episode_id","title","opening_crawl","director","producer","release_date","Component","MovieList","foundMovies","handleOpenItem","isOpen","movieID","length","Movie","isSorted","sortedMovies","searchMovies","sortMovies","evt","target","preventDefault","targetId","Number","filter","prevProps","prevState","toLowerCase","includes","newSortedMovies","sort","a","b","sortedMoviesFromFoundMovies","newSortedMoviesFromFoundMovies","conteiner","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.623e5c1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"Details_conteiner__3CfXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"Movie_conteiner__3OBwt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"App_conteiner__1Rp_J\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://swapi.dev/api/';\n\nexport default {\n  async getAllMovie() {\n    try {\n      const movies = await axios\n        .get(`films/?format=json`)\n        .then(movies => movies.data.results);\n      return movies;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n\n  async getCharacterById(id) {\n    try {\n      const character = await axios\n        .get(`people/${id}?format=json`)\n        .then(data => data.data);\n      console.log(character);\n      return character;\n      // http://swapi.dev/api/people/1/\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n\n  // async getPlanetById(id) {\n  // \ttry {\n  // \t\tconst planet = await axios.get(`planets/${id}?format=json`).then((planet) => planet.data);\n  // \t\tconsole.log(planet);\n  // \t\treturn planet;\n  // \t\t// http://swapi.dev/api/planets/1/\n  // \t} catch (error) {}\n  // }\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    '& .MuiButton-containedPrimary': {\n      color: '#151515',\n      backgroundColor: '#EEDB00',\n    },\n  },\n}));\n\nexport default function ButtonWrap({ name, toggleSortMovies }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        href=\"#contained-buttons\"\n        onClick={toggleSortMovies}\n      >\n        {name}\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n    '& .MuiFormLabel-root': {\n      fontFamily: 'PollerOne',\n    },\n    '& .MuiInputBase-input': {\n      fontFamily: 'PollerOne',\n    },\n    '& .Mui-focused': {\n      color: '#EEDB00',\n    },\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\n      borderColor: '#EEDB00',\n    },\n  },\n}));\n\nexport default function Input({\n  handleSubmit,\n  placeholder,\n  value,\n  handleChange,\n}) {\n  const classes = useStyles();\n\n  return (\n    <form\n      className={classes.root}\n      noValidate\n      autoComplete=\"off\"\n      onClick={handleSubmit}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        variant=\"outlined\"\n        value={value}\n        autoFocus\n        label={placeholder}\n        onChange={handleChange}\n        // type=\"search\"\n      />\n    </form>\n  );\n}\n","import React, { Fragment } from 'react';\nimport ButtonWrap from '../../ui/Button/ButtonWrap';\nimport Input from '../../ui/Input/Input';\n// import css from './SearchBar.module.css';\n\nfunction SearchBar({\n  handleChange,\n  handleSubmit,\n  searchQuery,\n  toggleSortMovies,\n}) {\n  return (\n    <Fragment>\n      <Input\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        value={searchQuery}\n        placeholder={'Enter movie name'}\n      />\n      <ButtonWrap name={'Sort'} toggleSortMovies={toggleSortMovies} />\n    </Fragment>\n  );\n}\n\nexport default SearchBar;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(12),\n    },\n    '& .MuiTypography-colorPrimary': {\n      color: '#EEDB00',\n    },\n  },\n}));\n\nexport default function ItemMovie({ name, id }) {\n  const classes = useStyles();\n\n  return (\n    <Typography className={classes.root}>\n      <Link href=\"#\" id={id}>\n        {name}\n      </Link>\n    </Typography>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport moviesAPI from '../../services/movies-api';\nimport css from './Details.module.css';\n\nclass Details extends Component {\n  state = {\n    characters: [],\n  };\n\n  componentDidMount() {\n    this.findMovieCharacters();\n  }\n\n  async findMovieCharacters() {\n    const { charactersFromSelectedMovie } = this.props;\n    const urlOfcharactersFromSelectedMovie = charactersFromSelectedMovie.flat();\n    const urlIDs = urlOfcharactersFromSelectedMovie.map(url => {\n      const forDelete = 'http://swapi.dev/api/people/';\n      const urlID = url.replace(forDelete, '');\n      return urlID;\n    });\n\n    const characters = await Promise.all(\n      urlIDs.map(id => {\n        return moviesAPI.getCharacterById(id);\n      }),\n    );\n    this.setState({ characters });\n  }\n\n  render() {\n    const { targetMovie } = this.props;\n    const { characters } = this.state;\n\n    return (\n      <Fragment>\n        {targetMovie.map(movie => (\n          <div className={css.font} key={movie.episode_id}>\n            <h2>{movie.title}</h2>\n            <p>description: {movie.opening_crawl}</p>\n            <div>\n              <p>\n                <span>director: </span>\n                {movie.director}\n              </p>\n              <p>\n                <span>producer: </span>\n                {movie.producer}\n              </p>\n              <p>\n                <span>release date: </span>\n                {movie.release_date}\n              </p>\n              <p>\n                <span>characters: </span>\n              </p>\n              <p>\n                <span />\n                {characters.map(character => (\n                  <span key={character.url}>{character.name}, </span>\n                ))}\n              </p>\n            </div>\n          </div>\n        ))}\n      </Fragment>\n    );\n  }\n}\n\nexport default Details;\n","import React from 'react';\nimport ItemMovie from '../../ui/ItemMovie/ItemMovie';\nimport Details from '../Details/Details';\n// import css from './MovieList.module.css';\n\nconst MovieList = ({\n  movies,\n  foundMovies,\n  handleOpenItem,\n  isOpen,\n  movieID,\n  targetMovie,\n  charactersFromSelectedMovie,\n}) => {\n  return (\n    <ul>\n      {foundMovies.length === 0\n        ? movies.map(movie => (\n            <li key={movie.episode_id} onClick={handleOpenItem}>\n              <ItemMovie\n                id={movie.episode_id}\n                isOpen={isOpen}\n                handleOpenItem={handleOpenItem}\n                name={movie.title}\n              />\n              {movieID === movie.episode_id && (\n                <Details\n                  movieID={movieID}\n                  charactersFromSelectedMovie={charactersFromSelectedMovie}\n                  targetMovie={targetMovie}\n                />\n              )}\n            </li>\n          ))\n        : foundMovies.map(movie => (\n            <li key={movie.episode_id} onClick={handleOpenItem}>\n              <ItemMovie\n                id={movie.episode_id}\n                isOpen={isOpen}\n                handleOpenItem={handleOpenItem}\n                name={movie.title}\n              />\n              {movieID === movie.episode_id && (\n                <Details\n                  movieID={movieID}\n                  charactersFromSelectedMovie={charactersFromSelectedMovie}\n                  targetMovie={targetMovie}\n                />\n              )}\n            </li>\n          ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { Component, Fragment } from 'react';\nimport moviesAPI from '../../services/movies-api';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport MovieList from '../../components/MovieList/MovieList';\nimport css from './Movie.module.css';\n\nclass Movie extends Component {\n  state = {\n    movies: [],\n    searchQuery: '',\n    foundMovies: [],\n    isSorted: false,\n    sortedMovies: [],\n    isOpen: false,\n    movieID: [],\n    targetMovie: [],\n\n    charactersFromSelectedMovie: [],\n  };\n  componentDidMount() {\n    moviesAPI.getAllMovie().then(movies => {\n      this.setState({ movies });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.searchMovies(this.state.searchQuery);\n      this.toggleSortMovies();\n      // this.getCharactersOfMovie();\n      const searchedMovies = this.state.movies;\n      const foundMovies = searchedMovies.filter(movie =>\n        movie.title\n          .toLowerCase()\n          .includes(this.state.searchQuery.toLowerCase()),\n      );\n      this.setState({ foundMovies });\n    }\n  }\n  // componentWillUnmount() {\n  // \t// убрать слушатели после componentDidMount\n  // }\n\n  searchMovies = searchQuery => {\n    moviesAPI.getAllMovie(searchQuery).then(movies =>\n      this.setState({\n        movies,\n      }),\n    );\n  };\n\n  sortMovies() {\n    const sortedMovies = this.state.movies;\n    let newSortedMovies = sortedMovies;\n    if (this.state.isSorted) {\n      newSortedMovies = sortedMovies.sort((a, b) =>\n        a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1,\n      );\n    } else {\n      newSortedMovies = sortedMovies.sort((a, b) =>\n        a.title.toLowerCase() < b.title.toLowerCase() ? 1 : -1,\n      );\n    }\n    this.setState({\n      isSorted: !this.state.isSorted,\n      sortedMovies: newSortedMovies,\n    });\n\n    const sortedMoviesFromFoundMovies = this.state.foundMovies;\n    let newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies;\n    if (this.state.isSorted) {\n      newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies.sort(\n        (a, b) => (a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1),\n      );\n    } else {\n      newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies.sort(\n        (a, b) => (a.title.toLowerCase() < b.title.toLowerCase() ? 1 : -1),\n      );\n    }\n    this.setState({\n      isSorted: !this.state.isSorted,\n      sortedMovies: newSortedMoviesFromFoundMovies,\n    });\n  }\n\n  toggleSortMovies = () => {\n    this.sortMovies();\n  };\n\n  handleChange = evt => {\n    this.setState({\n      searchQuery: evt.target.value,\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    if (this.state.searchQuery === '' || this.state.searchQuery === ' ') {\n      return;\n    }\n  };\n\n  handleOpenItem = evt => {\n    evt.preventDefault();\n    const targetId = Number(evt.target.id);\n    const foFindMovieFtomTarget = this.state.movies;\n    const targetMovie = foFindMovieFtomTarget.filter(\n      id => id.episode_id === targetId,\n    );\n    console.log('targetMovie', targetMovie);\n    const charactersFromSelectedMovie = targetMovie.map(\n      movie => movie.characters,\n    );\n    this.setState({\n      isOpen: !this.state.isOpen,\n      movieID: targetId,\n      targetMovie,\n      charactersFromSelectedMovie,\n    });\n  };\n\n  render() {\n    const {\n      movies,\n      searchQuery,\n      foundMovies,\n      isOpen,\n      movieID,\n      targetMovie,\n      charactersFromSelectedMovie,\n    } = this.state;\n    return (\n      <Fragment>\n        <header>\n          <h1>The Star Wars movies</h1>\n        </header>\n        <main className={css.conteiner}>\n          <SearchBar\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            searchQuery={searchQuery}\n            toggleSortMovies={this.toggleSortMovies.bind(this)}\n          />\n          <MovieList\n            isOpen={isOpen}\n            movies={movies}\n            foundMovies={foundMovies}\n            handleOpenItem={this.handleOpenItem}\n            movieID={movieID}\n            targetMovie={targetMovie}\n            charactersFromSelectedMovie={charactersFromSelectedMovie}\n          />\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default Movie;\n","import React from 'react';\nimport Movies from './pages/Movie/Movie';\nimport css from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={css.conteiner}>\n      <Movies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../src/stylesheet/style';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}