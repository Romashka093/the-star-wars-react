{"version":3,"sources":["App.module.css","services/movies-api.js","ui/Button/ButtonWrap.js","ui/Input/Input.js","components/SearchBar/SearchBar.js","ui/ItemMovie/ItemMovie.js","ui/MovieDetails/MovieInclude.js","ui/MovieDetails/MovieDetails.js","components/Details/Details.js","components/MovieList/MovieList.js","pages/Movie/Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","baseURL","get","then","movies","data","results","console","log","id","character","planet","useStyles","makeStyles","theme","root","margin","spacing","color","backgroundColor","ButtonWrap","name","toggleSortMovies","classes","className","Button","variant","href","onClick","width","fontFamily","borderColor","Input","handleSubmit","placeholder","value","handleChange","noValidate","autoComplete","TextField","autoFocus","label","onChange","SearchBar","searchQuery","marginLeft","ItemMovie","handleOpenItem","Typography","Link","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","MovieInclude","panel","items","titleName","React","useState","expanded","setExpanded","Accordion","event","isExpanded","AccordionSummary","aria-controls","AccordionDetails","map","item","key","url","minWidth","bullet","display","transform","title","pos","marginBottom","MovieDetails","targetMovie","characters","planets","movie","Card","episode_id","CardContent","Table","TableBody","TableRow","TableCell","director","producer","release_date","component","opening_crawl","Details","state","vehicles","starships","species","this","findMovieDetails","props","charactersFromSelectedMovie","planetsFromSelectedMovie","allCharacterUrlFromMovie","replace","allPlanetsUrlFromMovie","Promise","all","moviesAPI","setState","Component","MovieList","foundMovies","movieID","length","Movie","isSorted","sortedMovies","isOpen","searchMovies","sortMovies","evt","target","preventDefault","targetId","Number","filter","flat","prevProps","prevState","toLowerCase","includes","newSortedMovies","sort","a","b","sortedMoviesFromFoundMovies","newSortedMoviesFromFoundMovies","bind","App","css","conteiner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87b4562e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"App_conteiner__1Rp_J\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://swapi.dev/api/';\n\nexport default {\n  async getAllMovie() {\n    try {\n      const movies = await axios\n        .get(`films/?format=json`)\n        .then(movies => movies.data.results);\n      return movies;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n\n  async getCharacterById(id) {\n    try {\n      const character = await axios\n        .get(`people/${id}?format=json`)\n        .then(data => data.data);\n      return character;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n\n  async getPlanetById(id) {\n    try {\n      const planet = await axios\n        .get(`planets/${id}?format=json`)\n        .then(planet => planet.data);\n      console.log(planet);\n      return planet;\n      // http://swapi.dev/api/planets/1/\n    } catch (error) {}\n  },\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    '& .MuiButton-containedPrimary': {\n      color: '#151515',\n      backgroundColor: '#EEDB00',\n    },\n  },\n}));\n\nexport default function ButtonWrap({ name, toggleSortMovies }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        href=\"#contained-buttons\"\n        onClick={toggleSortMovies}\n      >\n        {name}\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n    '& .MuiFormLabel-root': {\n      fontFamily: 'PollerOne',\n    },\n    '& .MuiInputBase-input': {\n      fontFamily: 'PollerOne',\n    },\n    '& .Mui-focused': {\n      color: '#EEDB00',\n    },\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\n      borderColor: '#EEDB00',\n    },\n  },\n}));\n\nexport default function Input({\n  handleSubmit,\n  placeholder,\n  value,\n  handleChange,\n}) {\n  const classes = useStyles();\n\n  return (\n    <form\n      className={classes.root}\n      noValidate\n      autoComplete=\"off\"\n      onClick={handleSubmit}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        variant=\"outlined\"\n        value={value}\n        autoFocus\n        label={placeholder}\n        onChange={handleChange}\n        // type=\"search\"\n      />\n    </form>\n  );\n}\n","import React, { Fragment } from 'react';\nimport ButtonWrap from '../../ui/Button/ButtonWrap';\nimport Input from '../../ui/Input/Input';\n// import css from './SearchBar.module.css';\n\nfunction SearchBar({\n  handleChange,\n  handleSubmit,\n  searchQuery,\n  toggleSortMovies,\n}) {\n  return (\n    <Fragment>\n      <Input\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        value={searchQuery}\n        placeholder={'Enter movie name'}\n      />\n      <ButtonWrap name={'Sort'} toggleSortMovies={toggleSortMovies} />\n    </Fragment>\n  );\n}\n\nexport default SearchBar;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(12),\n    },\n    '& .MuiTypography-colorPrimary': {\n      color: '#EEDB00',\n    },\n  },\n}));\n\nexport default function ItemMovie({ name, id, handleOpenItem }) {\n  const classes = useStyles();\n\n  return (\n    <Typography className={classes.root} onClick={handleOpenItem}>\n      <Link href=\"#\" id={id}>\n        {name}\n      </Link>\n    </Typography>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    margin: theme.spacing(1),\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function MovieInclude({ items, titleName }) {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = panel => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Accordion\n        expanded={expanded === 'panel1'}\n        onChange={handleChange('panel1')}\n      >\n        <AccordionSummary\n          // expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography className={classes.secondaryHeading}>\n            {titleName}\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <ul>\n            {items.map(item => (\n              <li key={item.url}>\n                <Typography>{item.name}</Typography>\n              </li>\n            ))}\n          </ul>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport MovieInclude from './MovieInclude';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    backgroundColor: '#ffd',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function MovieDetails({ targetMovie, characters, planets }) {\n  const classes = useStyles();\n\n  //       {characters.map(character => (\n  //         <span key={character.url}>{character.name}, </span>\n  //       <span>\n  //         {planets.map(planet => (\n  //           <span key={planet.url}>{planet.name}, </span>\n  //         ))}\n  //       </span>\n\n  return (\n    <Fragment>\n      {targetMovie.map(movie => (\n        <Card key={movie.episode_id} className={classes.root}>\n          <CardContent>\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell>Director: </TableCell>\n                  <TableCell>{movie.director}</TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Producer: </TableCell>\n                  <TableCell>{movie.producer}</TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Release date: </TableCell>\n                  <TableCell>{movie.release_date}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n            <Typography variant=\"body2\" component=\"p\">\n              {movie.opening_crawl}\n            </Typography>\n            <MovieInclude items={characters} titleName={'All characters'} />\n            <MovieInclude items={planets} titleName={'All planets'} />\n          </CardContent>\n        </Card>\n      ))}\n    </Fragment>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport moviesAPI from '../../services/movies-api';\nimport MovieDetails from '../../ui/MovieDetails/MovieDetails';\n\nclass Details extends Component {\n  state = {\n    characters: [],\n    planets: [],\n    vehicles: [],\n    starships: [],\n    species: [],\n  };\n\n  componentDidMount() {\n    this.findMovieDetails();\n  }\n\n  async findMovieDetails() {\n    const {\n      charactersFromSelectedMovie,\n      planetsFromSelectedMovie,\n    } = this.props;\n    console.log(planetsFromSelectedMovie);\n\n    const allCharacterUrlFromMovie = charactersFromSelectedMovie.map(url => {\n      const forDelete = 'http://swapi.dev/api/people/';\n      const urlID = url.replace(forDelete, '');\n      return urlID;\n    });\n\n    const allPlanetsUrlFromMovie = planetsFromSelectedMovie.map(url => {\n      const forDelete = 'http://swapi.dev/api/planets/';\n      const urlID = url.replace(forDelete, '');\n      return urlID;\n    });\n\n    const characters = await Promise.all(\n      allCharacterUrlFromMovie.map(id => {\n        return moviesAPI.getCharacterById(id);\n      }),\n    );\n\n    const planets = await Promise.all(\n      allPlanetsUrlFromMovie.map(id => {\n        return moviesAPI.getPlanetById(id);\n      }),\n    );\n\n    this.setState({\n      characters,\n      // starships,\n      // vehicles,\n      planets,\n      // species,\n    });\n  }\n\n  render() {\n    const { targetMovie } = this.props;\n    const { characters, planets } = this.state;\n\n    return (\n      <Fragment>\n        <MovieDetails\n          targetMovie={targetMovie}\n          characters={characters}\n          planets={planets}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default Details;\n","import React from 'react';\nimport ItemMovie from '../../ui/ItemMovie/ItemMovie';\nimport Details from '../Details/Details';\n// import css from './MovieList.module.css';\n\nconst MovieList = ({\n  movies,\n  foundMovies,\n  handleOpenItem,\n  movieID,\n  targetMovie,\n  charactersFromSelectedMovie,\n  planetsFromSelectedMovie,\n}) => {\n  return (\n    <ul>\n      {foundMovies.length === 0\n        ? movies.map(movie => (\n            <li key={movie.episode_id}>\n              <ItemMovie\n                id={movie.episode_id}\n                handleOpenItem={handleOpenItem}\n                name={movie.title}\n              />\n              {movieID === movie.episode_id && (\n                <Details\n                  movieID={movieID}\n                  targetMovie={targetMovie}\n                  charactersFromSelectedMovie={charactersFromSelectedMovie}\n                  planetsFromSelectedMovie={planetsFromSelectedMovie}\n                />\n              )}\n            </li>\n          ))\n        : foundMovies.map(movie => (\n            <li key={movie.episode_id}>\n              <ItemMovie\n                id={movie.episode_id}\n                handleOpenItem={handleOpenItem}\n                name={movie.title}\n              />\n              {movieID === movie.episode_id && (\n                <Details\n                  movieID={movieID}\n                  targetMovie={targetMovie}\n                  charactersFromSelectedMovie={charactersFromSelectedMovie}\n                  planetsFromSelectedMovie={planetsFromSelectedMovie}\n                />\n              )}\n            </li>\n          ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { Component, Fragment } from 'react';\nimport moviesAPI from '../../services/movies-api';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport MovieList from '../../components/MovieList/MovieList';\n// import css from './Movie.module.css';\n\nclass Movie extends Component {\n  state = {\n    movies: [],\n    searchQuery: '',\n    foundMovies: [],\n    isSorted: false,\n    sortedMovies: [],\n    isOpen: false,\n    movieID: [],\n    targetMovie: [],\n\n    charactersFromSelectedMovie: [],\n    planetsFromSelectedMovie: [],\n  };\n  componentDidMount() {\n    moviesAPI.getAllMovie().then(movies => {\n      this.setState({ movies });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.searchMovies(this.state.searchQuery);\n      this.toggleSortMovies();\n      const searchedMovies = this.state.movies;\n      const foundMovies = searchedMovies.filter(movie =>\n        movie.title\n          .toLowerCase()\n          .includes(this.state.searchQuery.toLowerCase()),\n      );\n      this.setState({ foundMovies });\n    }\n  }\n  // componentWillUnmount() {\n  // \t// убрать слушатели после componentDidMount\n  // }\n\n  searchMovies = searchQuery => {\n    moviesAPI.getAllMovie(searchQuery).then(movies =>\n      this.setState({\n        movies,\n      }),\n    );\n  };\n\n  sortMovies() {\n    const sortedMovies = this.state.movies;\n    let newSortedMovies = sortedMovies;\n    if (this.state.isSorted) {\n      newSortedMovies = sortedMovies.sort((a, b) =>\n        a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1,\n      );\n    } else {\n      newSortedMovies = sortedMovies.sort((a, b) =>\n        a.title.toLowerCase() < b.title.toLowerCase() ? 1 : -1,\n      );\n    }\n    this.setState({\n      isSorted: !this.state.isSorted,\n      sortedMovies: newSortedMovies,\n    });\n\n    const sortedMoviesFromFoundMovies = this.state.foundMovies;\n    let newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies;\n    if (this.state.isSorted) {\n      newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies.sort(\n        (a, b) => (a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1),\n      );\n    } else {\n      newSortedMoviesFromFoundMovies = sortedMoviesFromFoundMovies.sort(\n        (a, b) => (a.title.toLowerCase() < b.title.toLowerCase() ? 1 : -1),\n      );\n    }\n    this.setState({\n      isSorted: !this.state.isSorted,\n      sortedMovies: newSortedMoviesFromFoundMovies,\n    });\n  }\n\n  toggleSortMovies = () => {\n    this.sortMovies();\n  };\n\n  handleChange = evt => {\n    this.setState({\n      searchQuery: evt.target.value,\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    if (this.state.searchQuery === '' || this.state.searchQuery === ' ') {\n      return;\n    }\n  };\n\n  handleOpenItem = evt => {\n    evt.preventDefault();\n    const targetId = Number(evt.target.id);\n    const foFindMovieFtomTarget = this.state.movies;\n    const targetMovie = foFindMovieFtomTarget.filter(\n      id => id.episode_id === targetId,\n    );\n    const charactersFromSelectedMovie = targetMovie\n      .map(movie => movie.characters)\n      .flat();\n    const planetsFromSelectedMovie = targetMovie\n      .map(movie => movie.planets)\n      .flat();\n\n    this.setState({\n      isOpen: !this.state.isOpen,\n      movieID: targetId,\n      targetMovie,\n      charactersFromSelectedMovie,\n      planetsFromSelectedMovie,\n    });\n  };\n\n  render() {\n    const {\n      movies,\n      searchQuery,\n      foundMovies,\n      movieID,\n      targetMovie,\n      charactersFromSelectedMovie,\n      planetsFromSelectedMovie,\n    } = this.state;\n    return (\n      <Fragment>\n        <header>\n          <h1>The Star Wars</h1>\n        </header>\n        <main>\n          <SearchBar\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            searchQuery={searchQuery}\n            toggleSortMovies={this.toggleSortMovies.bind(this)}\n          />\n          <MovieList\n            movies={movies}\n            foundMovies={foundMovies}\n            handleOpenItem={this.handleOpenItem}\n            movieID={movieID}\n            targetMovie={targetMovie}\n            charactersFromSelectedMovie={charactersFromSelectedMovie}\n            planetsFromSelectedMovie={planetsFromSelectedMovie}\n          />\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default Movie;\n","import React from 'react';\nimport Movies from './pages/Movie/Movie';\nimport css from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={css.conteiner}>\n      <Movies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../src/stylesheet/style';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}